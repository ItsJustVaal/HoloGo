// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: channels.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createChannel = `-- name: CreateChannel :one
INSERT INTO channels (id, created_at, updated_at, Channel, ChannelID, Region, Prio, Oshi, Gen, Tags, Company)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, created_at, updated_at, channel, channelid, region, prio, oshi, gen, tags, company
`

type CreateChannelParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Channel   string
	Channelid string
	Region    string
	Prio      sql.NullBool
	Oshi      sql.NullBool
	Gen       sql.NullInt32
	Tags      sql.NullString
	Company   sql.NullString
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, createChannel,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Channel,
		arg.Channelid,
		arg.Region,
		arg.Prio,
		arg.Oshi,
		arg.Gen,
		arg.Tags,
		arg.Company,
	)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Channel,
		&i.Channelid,
		&i.Region,
		&i.Prio,
		&i.Oshi,
		&i.Gen,
		&i.Tags,
		&i.Company,
	)
	return i, err
}

const getChannel = `-- name: GetChannel :one
SELECT id, created_at, updated_at, channel, channelid, region, prio, oshi, gen, tags, company FROM channels
WHERE ChannelID = $1
`

func (q *Queries) GetChannel(ctx context.Context, channelid string) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannel, channelid)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Channel,
		&i.Channelid,
		&i.Region,
		&i.Prio,
		&i.Oshi,
		&i.Gen,
		&i.Tags,
		&i.Company,
	)
	return i, err
}
